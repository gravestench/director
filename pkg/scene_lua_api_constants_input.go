package pkg

import (
	"github.com/gravestench/director/pkg/systems/input/constants"
	lua "github.com/yuin/gopher-lua"
)

const (
	luaInputConstantsName = "input"
)

func (s *SceneSystem) luaExportConstantsInput(mt *lua.LTable) {
	keyTable := s.Lua.NewTypeMetatable(luaInputConstantsName)

	keys := map[string]constants.Key{
		"Key0":            constants.Key0,
		"Key1":            constants.Key1,
		"Key2":            constants.Key2,
		"Key3":            constants.Key3,
		"Key4":            constants.Key4,
		"Key5":            constants.Key5,
		"Key6":            constants.Key6,
		"Key7":            constants.Key7,
		"Key8":            constants.Key8,
		"Key9":            constants.Key9,
		"KeyA":            constants.KeyA,
		"KeyB":            constants.KeyB,
		"KeyC":            constants.KeyC,
		"KeyD":            constants.KeyD,
		"KeyE":            constants.KeyE,
		"KeyF":            constants.KeyF,
		"KeyG":            constants.KeyG,
		"KeyH":            constants.KeyH,
		"KeyI":            constants.KeyI,
		"KeyJ":            constants.KeyJ,
		"KeyK":            constants.KeyK,
		"KeyL":            constants.KeyL,
		"KeyM":            constants.KeyM,
		"KeyN":            constants.KeyN,
		"KeyO":            constants.KeyO,
		"KeyP":            constants.KeyP,
		"KeyQ":            constants.KeyQ,
		"KeyR":            constants.KeyR,
		"KeyS":            constants.KeyS,
		"KeyT":            constants.KeyT,
		"KeyU":            constants.KeyU,
		"KeyV":            constants.KeyV,
		"KeyW":            constants.KeyW,
		"KeyX":            constants.KeyX,
		"KeyY":            constants.KeyY,
		"KeyZ":            constants.KeyZ,
		"KeyApostrophe":   constants.KeyApostrophe,
		"KeyBackslash":    constants.KeyBackslash,
		"KeyBackspace":    constants.KeyBackspace,
		"KeyCapsLock":     constants.KeyCapsLock,
		"KeyComma":        constants.KeyComma,
		"KeyDelete":       constants.KeyDelete,
		"KeyDown":         constants.KeyDown,
		"KeyEnd":          constants.KeyEnd,
		"KeyEnter":        constants.KeyEnter,
		"KeyEqual":        constants.KeyEqual,
		"KeyEscape":       constants.KeyEscape,
		"KeyF1":           constants.KeyF1,
		"KeyF2":           constants.KeyF2,
		"KeyF3":           constants.KeyF3,
		"KeyF4":           constants.KeyF4,
		"KeyF5":           constants.KeyF5,
		"KeyF6":           constants.KeyF6,
		"KeyF7":           constants.KeyF7,
		"KeyF8":           constants.KeyF8,
		"KeyF9":           constants.KeyF9,
		"KeyF10":          constants.KeyF10,
		"KeyF11":          constants.KeyF11,
		"KeyF12":          constants.KeyF12,
		"KeyGraveAccent":  constants.KeyGraveAccent,
		"KeyHome":         constants.KeyHome,
		"KeyInsert":       constants.KeyInsert,
		"KeyKP0":          constants.KeyKP0,
		"KeyKP1":          constants.KeyKP1,
		"KeyKP2":          constants.KeyKP2,
		"KeyKP3":          constants.KeyKP3,
		"KeyKP4":          constants.KeyKP4,
		"KeyKP5":          constants.KeyKP5,
		"KeyKP6":          constants.KeyKP6,
		"KeyKP7":          constants.KeyKP7,
		"KeyKP8":          constants.KeyKP8,
		"KeyKP9":          constants.KeyKP9,
		"KeyKPAdd":        constants.KeyKPAdd,
		"KeyKPDecimal":    constants.KeyKPDecimal,
		"KeyKPDivide":     constants.KeyKPDivide,
		"KeyKPEnter":      constants.KeyKPEnter,
		"KeyKPEqual":      constants.KeyKPEqual,
		"KeyKPMultiply":   constants.KeyKPMultiply,
		"KeyKPSubtract":   constants.KeyKPSubtract,
		"KeyLeft":         constants.KeyLeft,
		"KeyLeftBracket":  constants.KeyLeftBracket,
		"KeyMenu":         constants.KeyMenu,
		"KeyMinus":        constants.KeyMinus,
		"KeyNumLock":      constants.KeyNumLock,
		"KeyPageDown":     constants.KeyPageDown,
		"KeyPageUp":       constants.KeyPageUp,
		"KeyPause":        constants.KeyPause,
		"KeyPeriod":       constants.KeyPeriod,
		"KeyPrintScreen":  constants.KeyPrintScreen,
		"KeyRight":        constants.KeyRight,
		"KeyRightBracket": constants.KeyRightBracket,
		"KeyScrollLock":   constants.KeyScrollLock,
		"KeySemicolon":    constants.KeySemicolon,
		"KeySlash":        constants.KeySlash,
		"KeySpace":        constants.KeySpace,
		"KeyTab":          constants.KeyTab,
		"KeyUp":           constants.KeyUp,

		"MouseButtonLeft":   constants.MouseButtonLeft,
		"MouseButtonRight":  constants.MouseButtonRight,
		"MouseButtonMiddle": constants.MouseButtonMiddle,

		"ModAltLeft":      constants.ModAltLeft,
		"ModAltRight":     constants.ModAltRight,
		"ModControlLeft":  constants.ModControlLeft,
		"ModControlRight": constants.ModControlRight,
		"ModShiftLeft":    constants.ModShiftLeft,
		"ModShiftRight":   constants.ModShiftRight,
	}

	for k, v := range keys {
		s.Lua.SetField(keyTable, k, lua.LNumber(v))
	}

	s.Lua.SetField(mt, luaInputConstantsName, keyTable)
}
